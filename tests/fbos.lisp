(in-package :cepl.tests)
(in-readtable :fn.reader)

;;------------------------------------------------------------

(def-test fbo-0 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo 0)))
      (is (not (null fbo)))
      (is (not (null (attachment fbo 0))))
      (is (null (attachment fbo 1)))
      (is (null (attachment fbo :d))))))

(def-test fbo-1 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo 0 :d)))
      (is (not (null fbo)))
      (is (not (null (attachment fbo 0))))
      (is (null (attachment fbo 1)))
      (is (not (null (attachment fbo :d)))))))

(def-test fbo-2 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo 0 1)))
      (is (not (null fbo)))
      (is (not (null (attachment fbo 1))))
      (is (null (attachment fbo :d))))))

(def-test fbo-3 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo 0 1 :d)))
      (is (not (null fbo)))
      (is (not (null (attachment fbo 1))))
      (is (not (null (attachment fbo :d)))))))

(def-test fbo-4 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (100 100)))))
      (is (not (null fbo))))))

(def-test fbo-5 (:suite cepl.fbos)
  (ensure-cepl
    (signals cepl.errors:attachments-with-different-sizes
      (make-fbo '(0 :dimensions (100 100))
                :d))))

(def-test fbo-6 (:suite cepl.fbos)
  (ensure-cepl
    (signals cepl.errors:attachments-with-different-sizes
      (make-fbo '(0 :dimensions (100 100))
                '(1 :dimensions (10 100))))))

(def-test fbo-7 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (100 100))
                                '(:d :dimensions (100 100)))))
      (is (not (null fbo))))))

(def-test fbo-8 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0
                                  :dimensions (100 100)
                                  :element-type :rgba8))))
      (is (not (null fbo))))))

(def-test fbo-9 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0
                                  :dimensions (100 100)
                                  :element-type :vec4))))
      (is (not (null fbo))))))

(def-test fbo-10 (:suite cepl.fbos)
  (ensure-cepl
    (signals error
      (make-fbo '(0
                  :dimensions (100 100)
                  :element-type :vec4)
                '(:d
                  :dimensions (100 100)
                  :element-type :vec4)))))

(def-test fbo-11 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo :d)))
      (is (not (null fbo))))))

(def-test fbo-12 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3))))
      (with-fbo-bound (fbo)
        (clear))
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(0 0)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(0 0))))))

(def-test fbo-13 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3))))
      (clear-fbo fbo)
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(0 0)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(0 0))))))

(def-test fbo-14 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3))))
      (with-fbo-bound (fbo)
        (clear-attachments 0 2))
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(100 100)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(200 200))))))

(def-test fbo-15 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3))))
      (clear-fbo fbo 0 2)
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(100 100)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(200 200))))))

;;;---

(def-test fbo-16 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3)
                                '(:d :dimensions (2)))))
      (with-fbo-bound (fbo)
        (clear))
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(0 0)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(0 0))))))

(def-test fbo-17 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3)
                                '(:d :dimensions (2)))))
      (clear-fbo fbo)
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(0 0)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(0 0))))))

(def-test fbo-18 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3)
                                '(:d :dimensions (2)))))
      (with-fbo-bound (fbo)
        (clear-attachments 0 2))
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(100 100)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(200 200))))))

(def-test fbo-19 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                 (t1 (make-texture '(100 100) :element-type :uint8))
                 (t2 (make-texture '(150 150) :element-type :uint8))
                 (t3 (make-texture '(200 200) :element-type :uint8))
                 (fbo (make-fbo (list 0 t0)
                                (list 1 t1)
                                (list 2 t2)
                                (list 3 t3)
                                '(:d :dimensions (2)))))
      (clear-fbo fbo 0 2)
      (is (equal (pull-g t0) '(0 0)))
      (is (equal (pull-g t1) '(100 100)))
      (is (equal (pull-g t2) '(0 0)))
      (is (equal (pull-g t3) '(200 200))))))

(def-test fbo-20 (:suite cepl.fbos)
  (let ((x 0))
    (ensure-cepl
      (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                   (t1 (make-texture '(100 100) :element-type :uint8))
                   (t2 (make-texture '(150 150) :element-type :uint8))
                   (t3 (make-texture '(200 200) :element-type :uint8))
                   (fbo (make-fbo (list 0 t0)
                                  (list 1 t1)
                                  (list 2 t2)
                                  (list 3 t3)
                                  '(:d :dimensions (2)))))
        (with-fbo-bound (fbo)
          (clear-attachments x 2))
        (is (equal (pull-g t0) '(0 0)))
        (is (equal (pull-g t1) '(100 100)))
        (is (equal (pull-g t2) '(0 0)))
        (is (equal (pull-g t3) '(200 200)))))))

(def-test fbo-21 (:suite cepl.fbos)
  (declare (notinline clear-attachments))
  (let ((x 0))
    (ensure-cepl
      (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                   (t1 (make-texture '(100 100) :element-type :uint8))
                   (t2 (make-texture '(150 150) :element-type :uint8))
                   (t3 (make-texture '(200 200) :element-type :uint8))
                   (fbo (make-fbo (list 0 t0)
                                  (list 1 t1)
                                  (list 2 t2)
                                  (list 3 t3)
                                  '(:d :dimensions (2)))))
        (with-fbo-bound (fbo)
          (clear-attachments x 2))
        (is (equal (pull-g t0) '(0 0)))
        (is (equal (pull-g t1) '(100 100)))
        (is (equal (pull-g t2) '(0 0)))
        (is (equal (pull-g t3) '(200 200)))))))

(def-test fbo-22 (:suite cepl.fbos)
  (let ((x 0))
    (ensure-cepl
      (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                   (t1 (make-texture '(100 100) :element-type :uint8))
                   (t2 (make-texture '(150 150) :element-type :uint8))
                   (t3 (make-texture '(200 200) :element-type :uint8))
                   (fbo (make-fbo (list 0 t0)
                                  (list 1 t1)
                                  (list 2 t2)
                                  (list 3 t3)
                                  '(:d :dimensions (2)))))
        (clear-fbo fbo x 2)
        (is (equal (pull-g t0) '(0 0)))
        (is (equal (pull-g t1) '(100 100)))
        (is (equal (pull-g t2) '(0 0)))
        (is (equal (pull-g t3) '(200 200)))))))

(def-test fbo-23 (:suite cepl.fbos)
  (declare (notinline clear-fbo))
  (let ((x 0))
    (ensure-cepl
      (with-free* ((t0 (make-texture '(50 50) :element-type :uint8))
                   (t1 (make-texture '(100 100) :element-type :uint8))
                   (t2 (make-texture '(150 150) :element-type :uint8))
                   (t3 (make-texture '(200 200) :element-type :uint8))
                   (fbo (make-fbo (list 0 t0)
                                  (list 1 t1)
                                  (list 2 t2)
                                  (list 3 t3)
                                  '(:d :dimensions (2)))))
        (clear-fbo fbo x 2)
        (is (equal (pull-g t0) '(0 0)))
        (is (equal (pull-g t1) '(100 100)))
        (is (equal (pull-g t2) '(0 0)))
        (is (equal (pull-g t3) '(200 200)))))))


;;------------------------------------------------------------

(def-test render-to-fbo-0 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (4 4))))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 1 0 0 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (let* ((data (pull-g (attachment fbo 0)))
             (elem (caar data)))
        (is (every #'equal (v!uint8 255 0 0 0) elem))))))

(def-test render-to-fbo-1 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (4 4) :element-type :vec4)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (let* ((data (pull-g (attachment fbo 0)))
             (elem (caar data)))
        (is (every #'equal (v! 0 0 1 0) elem))))))

(def-test render-to-fbo-2 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 16383))
        (clear)
        (is (v4:= (v! 0 0 0 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 32767))))))

(def-test render-to-fbo-3 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 16383))
      (clear-fbo fbo)
      (is (v4:= (v! 0 0 0 0)
                  (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 32767)))))

(def-test render-to-fbo-4 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 16383))
        (clear-attachments :d)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 32767))))))

(def-test render-to-fbo-5 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 16383))
      (clear-fbo fbo :d)
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 32767)))))

(def-test render-to-fbo-6 (:suite cepl.fbos)

  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 16383))
        (clear)
        (is (v4:= (v! 0 0 0 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 32767))))))

(def-test render-to-fbo-7 (:suite cepl.fbos)
  (declare (notinline clear-fbo))
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 16383))
      (clear-fbo fbo)
      (is (v4:= (v! 0 0 0 0)
                  (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 32767)))))

(def-test render-to-fbo-8 (:suite cepl.fbos)
  (declare (notinline clear-attachments))
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 16383))
        (clear-attachments :d)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 32767))))))

(def-test render-to-fbo-9 (:suite cepl.fbos)
  (declare (notinline clear-fbo))
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 16383))
      (clear-fbo fbo :d)
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 32767)))))


(def-test render-to-fbo-10 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 16383))
        (clear-attachments 0 :d)
        (is (v4:= (v! 0 0 0 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 32767))))))

(def-test render-to-fbo-11 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 16383))
      (clear-fbo fbo 0 :d)
      (is (v4:= (v! 0 0 0 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 32767)))))

(def-test render-to-fbo-12 (:suite cepl.fbos)
  (declare (notinline clear-attachments))
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs)
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 16383))
        (clear-attachments 0 :d)
        (is (v4:= (v! 0 0 0 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (= (caar (pull-g (attachment fbo :d))) 32767))))))

(def-test render-to-fbo-13 (:suite cepl.fbos)
  (declare (notinline clear-fbo))
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(:d :dimensions (2 2)
                                  :element-type :depth-component16)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (v! 0 0 1 0))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo)
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 16383))
      (clear-fbo fbo 0 :d)
      (is (v4:= (v! 0 0 0 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (= (caar (pull-g (attachment fbo :d))) 32767)))))

(def-test render-to-fbo-14 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(1 :dimensions (2 2) :element-type :vec4)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (values
                                          (v! 0 0 1 0)
                                          (v! 0 1 0 0)))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo :draw-buffers (attachment-pattern 0 1))
        (map-g pipeline bs))
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (v4:= (v! 0 1 0 0)
                (caar (pull-g (attachment fbo 1))))))))

(def-test render-to-fbo-15 (:suite cepl.fbos)
  (ensure-cepl
    (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                '(1 :dimensions (2 2) :element-type :vec4)))
                 (pipeline (pipeline-g (:points)
                             :fragment (lambda-g ((uv :vec2))
                                         (values
                                          (v! 0 0 1 0)
                                          (v! 0 1 0 0)))))
                 (bs (make-buffer-stream nil :primitive :points)))
      (with-fbo-bound (fbo :draw-buffers (attachment-pattern 1 0))
        (map-g pipeline bs))
      (is (v4:= (v! 0 1 0 0)
                (caar (pull-g (attachment fbo 0)))))
      (is (v4:= (v! 0 0 1 0)
                (caar (pull-g (attachment fbo 1))))))))

(def-test render-to-fbo-16 (:suite cepl.fbos)
  (ensure-cepl
    (let ((x (attachment-pattern 1 0)))
      (with-free* ((fbo (make-fbo '(0 :dimensions (2 2) :element-type :vec4)
                                  '(1 :dimensions (2 2) :element-type :vec4)))
                   (pipeline (pipeline-g (:points)
                               :fragment (lambda-g ((uv :vec2))
                                           (values
                                            (v! 0 0 1 0)
                                            (v! 0 1 0 0)))))
                   (bs (make-buffer-stream nil :primitive :points)))
        (with-fbo-bound (fbo :draw-buffers x)
          (map-g pipeline bs))
        (is (v4:= (v! 0 1 0 0)
                  (caar (pull-g (attachment fbo 0)))))
        (is (v4:= (v! 0 0 1 0)
                  (caar (pull-g (attachment fbo 1)))))))))

;;------------------------------------------------------------
